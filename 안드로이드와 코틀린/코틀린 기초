[6. 증감연산자]

  a = 5이고 b = 2일 때,
  ++a + b--에서 값이 바뀌는 순서는?
  -> a 먼저. 그 다음 a + b. 마지막으로 b--


[7. 비트 연산자]

  15 and 7하면?
  ->각 자리 비트가 둘 다 1이면 1, 아니면 0.
  ->00001111과 00000111.
  ->답은 7

  or 연산 xor 연산에 쓰는 연산자는?
  ->그냥 영어로 or, xor

  비트단위 반전 연산자는?
  -> 숫자.inv()

  쉬프트 연산자는?
  -> a shl b (a값을 왼쪽으로 b만큼 쉬프트. 단위 넘어가면 무시).
  -> a shr b (a값을 오른쪽으로 b만큼 쉬프트. 단위 넘어가면 무시).

  쉬프트 연산자의 효용은?
  -> a shl b란 a * 2^b 이다.
  -> a shr b란 a / s^b 이다.


[8. 정수타입/ 실수타입]

  Byte, Int, Float, Double타입의 용량은?
  -> 1, 4, 4, 8 Byte

  실수를 표현하는 법?
  -> 유효숫자 * 2^N
  -> 여기선 유효숫자와 N만 저장됨.

  유효숫자란?
  -> 실수표현을 위한 2진수. (10111001 같은)

  왜 이름이 Double인가?
  -> 진짜 Float의 2배만큼 표현할 수 있어서.

  0b, 0x란?
  -> 정수 앞에 붙여 이진수, 십육진수인 걸 표현함.

  Double + Float 시 결과값의 타입은?
  -> Double.

  Byte + Byte시 결과값의 타입은?
  -> Int. Int보다 작거나 같은 정수타입의 덧셈 결과는 Int.

  10f의 타입은?
  -> Float


[9. 실수타입의 함정]

  왜 모든 값을 실수로 쓰면 안되나?
  -> 정확 표현 불가. 왜냐하면 실수는 유효숫자 * 2^N으로 대략적으로 표현되기 때문.

  실수로 연산을 누적하면?
  -> 오차 누적.
  -> 예를 들어 0.000001 * 1000000하면 1이 아니라 작은 소숫점값이 붙음.


[10. 문자타입]

  문자타입이란?
  -> 문자를 저장하는 타입

  코드 상 A와 'A'의 차이란?
  -> A는 자체는 문법에 없는 것. 그러므로 컴파일러에게 이 식별자가 뭔지 알려야함. (변수 정의를 한다던가)
  -> 반면 'A'는 문자 리터럴.

  유니코드를 저장하는 법?
  -> \u숫자(16진수로 4자리 정수로 표현가능하다)


[11. 스트링]

  스트링의 내부 구조?
  -> Char타입이 연속되어있다.

  스트링의 리터럴은?
  -> "안녕하세요"

  스트링은 무엇 기반 접근이 가능한가?
  -> 인덱스 기반 접근
  -> "Hello"[2] 를 한다면 'l'을 반환한다.

  Char의 바이트값은?
  -> 2바이트


[12. $]

  "$변수"하면?
  -> 변수의 값을 출력하낟

  '$' 자체를 출력하고 싶으면?
  -> "\$"

  왜 ${a + b}에서 {}로 감싸나?
  -> ${}이란 내부에 표현식을 넣을 수 있다.
  -> 이 때 표현식이란 하나의 값으로 계산결과가 출력되는 코드이다.
  -> 즉, a = b + c에서, b + c는 표현식이지만 a = b + c 자체는 표현식이 아니라 ${}에 넣을 수 없다.


[13. typealias]

  타입얼라이어스란?
  -> 타입에 별명을 붙인다.

 타입얼라이어스의 효용이란?
  -> 긴 타입을 줄일 수 있다.
  -> 이 때 타입이란 우리가 생각하는 기본타입 String같은 것도 되지만,
  -> 보통 함수 타입, (String, Int) -> Unit 같은 입출력 양식을 말한다.


[14. 주석]

  한줄 주석하는 법?
  -> //

  여러줄 주석하는 법?
  -> /* 어쩌구저쩌구 */


[15. = 연산자]

  *, %, +, -, = 중에서 우선순위는?
  -> * % + - =.
  ->즉, = 연산자가 우선순위가 낮다는 것!
