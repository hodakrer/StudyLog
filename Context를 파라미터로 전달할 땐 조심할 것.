요약:

  1. Context는 어플리케이션, 액티비티의 정보를 담은 클래스이다.

  2. Context는 Application Context, Activity Context로 나뉜다. 상황에 맞게 구분해서 쓰지 않으면 메모리 누수가 난다!

  3. 이거 설명하면서 나온 가비지 컬렉터, AppCompatActivity, getApplicationContext도 공부하자!


배경:

  당시 MVVM 구조를 내 메신저앱 PlusTalk1에 적용하는 중이었다.

  SharedPreferences는 UI와 관련되지 않았으니 뷰 패키지에 속하지 않는다는 걸 깨달았다.

  당시 나는 '그럼 SharedPreferences를 뷰인 SigninFragment에서 빼내야겠다'고 생각했다.

  그때 뷰모델을 만들고 있었기에, 나는 SharedPreferences를 뷰모델 객체 내부에 있는 메소드로 구현하려고 했다.
  (지금 돌이켜보면 뷰모델이 아니라 모델 아래의 Repository에 적용했어야했다!)

  조심스러웠던 나는 ChatGPT에게 이게 맞냐고 물어보았다.

  그러자 ChatGPT가 'Context 타입 객체를 함부로 뷰 외부로 빼내면 안된다!'고 나를 혼내지 않던가.


본문 1: Context란 무엇인가?

  https://developer.android.com/reference/android/content/Context

  Context란 현재 앱에 대한 정보를 담고있는 객체를 말한다.

  Context는 어플리케이션에 대한 정보, 또는 액티비티, 브로드캐스팅 같은 컴포넌트의 정보를 우리에게 제공한다.

  특히 액티비티는 Context 클래스를 확장해서 만든 클래스이다.

  그런데 잠깐,

![StudyLog](https://github.com/hodakrer/StudyLogImages/raw/main/2025030801.png)

  우린 AppCompatActivity가 더 익숙하다.

  그럼 AppCompatActivity와 Context의 관계는 무엇일까?

![StudyLog](https://github.com/hodakrer/StudyLogImages/raw/main/2025030802.png)

  역시 구글 공식 DOC이다. 척하면 척 나오는구나!

  여기선 AppCompatActivity보다 Context가 더 부모라는 것만 알아두자.

  (나중에 이것도 공부하리라 염두해두며 링크를 남긴다)

  https://developer.android.com/reference/androidx/appcompat/app/AppCompatActivity


본문 2: Context는 이때 쓰면 안된다.

  1. 뷰모델 등에서 액티비티를 멤버 변수로 참조할 때.

  2. 싱글톤에서 액티비티를 참조할 때.

  3. 텍스트뷰를 Static으로 선언하고 Activity가 이를 참조할 때.

  그렇다. 나는 1번에 해당하는 것이었다. 물론 당시 MVVM에 어색했던 내가 데이터 불러오는 코드를 모델-레포지토리가 아닌 뷰모델에 구현하려 했던 것도 문제긴 하다만.

  그러면 왜 쓰면 안될까?

  공식 DOCS를 보면 잘못 쓸 때 심각한 메모리 누수가 난다고 한다. leak으로 ctrl + h를 해서 getApplicationContext라는 메소드 부분에서 읽게 되었다.

  지금 내가 SharedPreferences를 쓰는 코드를 보니 requireContext.getSharedPreferences()이다. Docs에 따르면 이걸 context.applicationContext.getSharedPreferences()로 바꿔 써도 된다고 한다.


본문 3: Context 이론

  Context는 크게 2가지로 나뉜다.

  1. Application Context. 이건 어플리케이션의 라이프사이클을 따르며 어플리케이션이 실행되고 종료될 때까지 동일한 객체를 참고한다.

  이 친구를 쓰는 때는 액티비티가 벗어난 곳에서 Context가 필요할 때 사용한다. 오랫동안 쓰거나 앱 전역에서 사용하려면 이 Application Context를 써야한다.

  다른 블로그를 보면 
 
  <예를 들어, 어플리케이션 내에 싱글톤 객체를 만드려고 하는데 이 객체가 Context 를 필요로 할 때, Application Context 를 사용하면 된다.
   만약 이런 상황에 Activity Context 를 넘겨주게 되면, Activity 에 대한 참조를 메모리에 남겨두며 GC (Garbage Collected) 되지 않은 채 분명 메모리 릭이 발생할 것이다.>
   출처: https://velog.io/@haero_kim/Android-Context-%EB%84%88-%EB%8C%80%EC%B2%B4-%EB%AD%90%EC%95%BC

  라고 써있다. 아직 GC나 액티비티에 대한 메모리 참조는 추후에 공부해야겠지만, 액티비티A에 대한 Context를 외부에서 쓰면서 액티비티A는 사라지면 참조에 대한 메모리만 남는다는 것 같다. (추후 공부하자!)

  2. Activity Context. 이건 액티비티의 라이프사이클을 따르며 액티비티가 onDestroy()때 Activity Context도 사라진다고 한다.

  반면, Activity Context를 써야하는데 Application Context를 사용하면 안되는 경우는 뭘까?

  위 haero_kim님의 블로그를 보면 GUI 컨텐츠(뷰 등) 관련 동작에서 Application Context를 사용하면 안된다고 한다.

  아하! 이건 나도 느낌이 온다. GUI는 액티비티와 연관된 것이기 때문이다. 왜냐하면 액티비티는 MVVM에서 View니까 말이다!.

  설명에 따르면 액티비티가 onDestroy되어도 Application Context를 활용한 객체가 메모리에서 할당 해제를 하지 않는다면, 이것 또한 메모리 누수이다.

  https://lakue.tistory.com/82

  여기 또 하나의 상황 예시가 있다.




