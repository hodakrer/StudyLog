Object 클래스 - 2: 표현식

본론:

  어제 쓴 얘기의 반복이지만, object는 선언과 동시에 클래스는 물론 객체까지 생성한다.
  객체는 변수 선언이 아니라 표현식으로 만들어진다.
  공식 문서엔 이걸 '익명 객체'라고 표현한다!


익명 객체 만들기:

  (공식 문서의 예시)
  val a = object{
      val b = "hello world"
      override fun toString() = "$b"
  }
  println(a)

  이러면 뭐가 출력될까?
  어제 배운걸 떠올리면 object 객체이름 + 해시값이 나올 줄 알았다.
  그러나 공식 문서에선 b인 hello world가 출력된다.
  누구 마음대로 갑자기 toString()이 작동하나?

  찾아보니 println은 파라미터로 들어온 객체의 toString()을 출력한다.
  그리고 toString()은 기본적으로 객체이름과 해시값을 출력하는 게 맞다.
  그렇다면 val = 3; println(a)하면 3을 출력했던 건 뭐냐고?

  아하! 그런 Int, Double, String 타입은 진즉 Any 클래스의 toString()이 오버라이드 되어있던 것!
  그래서 공식문서의 예시도 override toString()이었구나!

  사족이 길었다.


object + 생성자():

  함수에 파라미터를 전달할 때, 그 파라미터를 한번만 사용할 거라면 어떨까?
  그걸 위해 객체를 만들면 낭비다.
  하지만 아래 코드를 보라.

  doSomething( object : SomeClass( ) {
      override behave ( ) {   }
  })

  여기서 알게 된 것. object : 생성자 { override 함수  }하면 일회용인 익묭 객체를 파라미터로 전달할 수 있다!


익명 객체를 반환값으로 쓸 때:

  button.setOnClickListener(object : View.OnClickListener {
    override fun onClick(v: View) {
        println("버튼 클릭됨!")
    }
  })

  이건 익숙하다. 어쩐지 낯이 익더라.
  근데 굳이 이런 것까지 익명 객체로 반환값에 써야하나?

  답은 그렇다. 반환값이 일반클래스라면, 따로 클래스.kt를 만들어줘야하니까!
  반면 익명 객체면 그냥 기존 코드에 슬쩍 정의해도 된다. 이름이 없는데 어떻게 따로 클래스.kt를 만들어주겠나? 하하하!


object 선언과 object 표현식의 초기화 차이:

  object 선언은 초기화가 바로 된다. 생각해보면 당연하다. 왜냐면 선언 즉시 객체도 만드니까 말이다!
  object 표현식은 해당 코드에 처음 접근할 때 된다. 이걸 공식 문서에선 'lazily'라고 표현한다.
  추가로, companion object의 초기화는 해당 클래스가 처은 사용될 때 된다.


후기:

  공식 문서를 공부하니 지식이 매우 느는 기분이다!
  교과서에서 보던 '그래서 이 이상한 건 언제 쓴다고?'를 피부로 짜릿짜릿하게 느낄 수 있다!
  내일은 공식 문서로 안드로이드 라이프 사이클을 공부하고 싶은 기분.
  아마 문서를 펼치면 "왔다, 내 보약!" 하고 나도 모르게 소리치지 않을까?
  생각보다 유쾌한 경험이었다!

  
